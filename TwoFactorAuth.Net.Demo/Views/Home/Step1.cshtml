@model TwoFactorAuth

@{
    ViewBag.Title = "Step 1";
}

<h2>Step 1: Set up secret shared key</h2>

<p>When a user wants to setup two-factor auth (or, more correctly, multi-factor auth) you need to create a secret. This will be your <strong>shared secret</strong>. This secret will need to be entered by the user in their app. This can be done manually, in which case you simply display the secret and have the user type it in the app:</p>

<pre>
    var tfa = new TwoFactorAuth("MyCompany");
    // Though the default is an 80 bits secret (for backwards compatibility reasons) we 
    // recommend creating 160+ bits secrets (see RFC 4226 - Algorithm Requirements)
    var secret = tfa.CreateSecret(160);</pre>

<p>The <code>CreateSecret()</code> method accepts two arguments: <code>bits</code> (default: <code>80</code>) and <code>cryptoSecureRequirement</code> (default: <code>RequireSecure</code>). The former is the number of bits generated for the shared secret. Make sure this argument is a multiple of 8 and, again, keep in mind that not all combinations may be supported by all apps. Google authenticator seems happy with 80 and 160, the default is set to 80 because that's what most sites (that I know of) currently use; however a value of 160 or higher is recommended (see <a href="https://tools.ietf.org/html/rfc4226#section-4">RFC 4226 - Algorithm Requirements</a>). The latter is used to ensure that the secret is cryptographically secure; if you don't care very much for cryptographically secure secrets you can specify <code>AllowInsecure</code> and use a non-cryptographically secure RNG provider.</p>

<pre>
    // Display shared secret
    &lt;p&gt;Please enter the following secret in your app: @@secret&lt;/p&gt;</pre>

<p>This results in:</p>

<div class="well">
    Please enter the following secret in your app: <code>@Session["secret"]</code>
</div>

<p>Another, more user-friendly, way to get the shared secret into the app is to generate a <a href="//en.wikipedia.org/wiki/QR_code">QR-code</a> which can be scanned by the app. To generate these QR codes you can use any one of the built-in QRProvider classes:</p>

<ol type="1">
    <li><code><a href="//github.com/RobThree/TwoFactorAuth.Net/blob/master/TwoFactorAuth.Net/Providers/Qr/GoogleQrCodeProvider.cs">GoogleQrCodeProvider</a></code> (Default)</li>
    <li><code><a href="//github.com/RobThree/TwoFactorAuth.Net/blob/master/TwoFactorAuth.Net/Providers/Qr/QrServerQrCodeProvider.cs">QrServerQrCodeProvider</a></code></li>
    <li><code><a href="//github.com/RobThree/TwoFactorAuth.Net/blob/master/TwoFactorAuth.Net/Providers/Qr/QrServerQrCodeProvider.cs">QRicketQrCodeProvider</a></code></li>
</ol>

<p>...or implement your own provider. To implement your own provider all you need to do is implement the <code><a href="//github.com/RobThree/TwoFactorAuth.Net/blob/master/TwoFactorAuth.Net/Providers/Qr/IQrCodeProvider.cs">IQRCodeProvider</a></code> interface. You can use the built-in providers mentioned before to serve as an example or read the next chapter in this file. The built-in classes all use a 3rd (e.g. external) party (Google, QRServer and QRicket) for the hard work of generating QR-codes (note: each of these services might at some point not be available or impose limitations to the number of codes generated per day, hour etc.). You could, however, easily use <a href="//www.nuget.org/packages?q=qr">any library</a> to generate your QR-codes without depending on external sources. See <a href="https://github.com/RobThree/TwoFactorAuth.Net">the project site</a> on how to do this.</p>

<p>The built-in providers all have some provider-specific 'tweaks' you can 'apply'. Some provide support for different colors, others may let you specify the desired image-format etc. What they all have in common is that they return a QR-code as binary blob which, in turn, will be turned into a <a href="//en.wikipedia.org/wiki/Data_URI_scheme">data URI</a> by the <code>TwoFactorAuth</code> class. This makes it easy for you to display the image without requiring extra 'roundtrips' from browser to server and vice versa.</p>

<pre>
    // Display QR code to user
    &lt;p&gt;Scan the following image with your app:&lt;/p&gt;
    &lt;p&gt;&lt;img src="@@tfa.GetQrCodeImageAsDataUri("Bob Ross", secret)"&gt;&lt;/p&gt;
    &lt;p&gt;Or enter the following secret in your app: @@Session["secret"]&gt;&lt;/p&gt;</pre>

<p>This results in:</p>

<div class="well">
    <p>Scan the following image with your app:</p>
    <p><img src="@Model.GetQrCodeImageAsDataUri("Bob Ross", (string)Session["secret"])"></p>
    <p>Or enter the following secret in your app: @Session["secret"]</p>
</div>

<p>Did you scan (or manually enter) the secret?</p>

<p>
    @Html.ActionLink("Let's proceed to step 2! »", "Step2", new { controller = "Home" }, new { @class = "btn btn-success" })
</p>

<p>Incidentally, you may want to ensure your host has the correct time; you can use the <code>EnsureCorrectTime()</code> method for that.</p>
<p>
        @{
            try
            {
                Model.EnsureCorrectTime();
                <div class="alert alert-success" role="alert">
                    Your time seems to be correct!
                </div>
            }
            catch (Exception ex)
            {
                <div class="alert alert-danger" role="alert">
                    Your time seems to be off! (@ex.Message)
                </div>
            }
        }
</p>
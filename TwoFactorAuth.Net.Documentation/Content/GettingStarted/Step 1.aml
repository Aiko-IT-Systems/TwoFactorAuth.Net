<?xml version="1.0" encoding="utf-8"?>
<topic id="0c0aed71-4f77-4478-977c-fe153aaa1f7b" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        When a user wants to setup two-factor auth (or, more correctly, multi-factor auth) you need to create a
        <literal>secret</literal>. This will be your <legacyBold>shared secret</legacyBold>. This
        <literal>secret</literal> will need to be entered by the user in their app. This can be done manually,
        in which case you simply display the <literal>secret</literal> and have the user type it in the app:
      </para>
      <code language="c#">
        <![CDATA[
var tfa = new TwoFactorAuth("MyCompany");
var secret = tfa.CreateSecret();
        ]]>
      </code>
      <para>
        The <codeEntityReference>Overload:TwoFactorAuthNet.TwoFactorAuth.CreateSecret</codeEntityReference>
        method accepts two arguments: <literal>bits</literal> (default: <literal>80</literal>) and
        <literal>cryptoSecureRequirement</literal> (default: <literal>RequireSecure</literal>). The former is the
        number of bits generated for the shared <literal>secret</literal>. Make sure this argument is a multiple
        of 8 and, again, keep in mind that not all combinations may be supported by all apps. Google
        Authenticator seems happy with 80 and 160, the default is set to 80 because that's what most sites (that
        I know of) currently use. The latter is used to ensure that the secret is cryptographically secure; if
        you don't care very much for cryptographically secure secrets you can specify
        <literal>AllowInsecure</literal> and use a non-cryptographically secure RNG provider.
      </para>
      <code language="c#">
        <![CDATA[
// Display shared secret
<p>Please enter the following secret in your app: @secret</p>
        ]]>
      </code>
      <para>
        This results in:
      </para>
      <quote>
        <computerOutputInline>Please enter the following secret in your app: </computerOutputInline>
        <literal>XANIK3POC23RCRYN</literal>
      </quote>
      <para>
        Another, more user-friendly, way to get the shared secret into the app is to generate a
        <externalLink>
          <linkText>QR-code</linkText>
          <linkUri>https://en.wikipedia.org/wiki/QR_code</linkUri>
        </externalLink> which can be scanned by the app. To generate these QR codes you can use any one of the
        built-in QRProvider classes:
      </para>
      <list class="ordered">
        <listItem>
          <para>
            <codeEntityReference>T:TwoFactorAuthNet.Providers.Qr.ImageChartsQrCodeProvider</codeEntityReference>
            (Default)
          </para>
        </listItem>
        <listItem>
          <para>
            <codeEntityReference>T:TwoFactorAuthNet.Providers.Qr.QrServerQrCodeProvider</codeEntityReference>
          </para>
        </listItem>
        <listItem>
          <para>
            <codeEntityReference>T:TwoFactorAuthNet.Providers.Qr.QRicketQrCodeProvider</codeEntityReference>
          </para>
        </listItem>
      </list>
      <para>
        ...or <link xlink:href="d44a172a-9093-4738-81b9-c6a2ae26760b">implement your own QR Code provider</link>. To
        implement your own provider all you need to do is implement the
        <codeEntityReference>T:TwoFactorAuthNet.Providers.Qr.IQrCodeProvider</codeEntityReference>
        interface. You can use the built-in providers mentioned before to serve as an example or read the next
        chapter in this file. The built-in classes all use a 3rd (e.g. external) party (ImageCharts, QRServer and
        QRicket) for the hard work of generating QR-codes (note: each of these services might at some point not
        be available or impose limitations to the number of codes generated per day, hour etc.). You could,
        however, easily use <externalLink>
          <linkText>any library</linkText>
          <linkUri>https://www.nuget.org/packages?q=qr</linkUri>
        </externalLink> to generate your QR-codes without depending on external sources. See
        <link xlink:href="d44a172a-9093-4738-81b9-c6a2ae26760b" /> on how to do this.
      </para>
      <para>
        The built-in providers all have some provider-specific 'tweaks' you can 'apply'. Some provide support for
        different colors, others may let you specify the desired image-format etc. What they all have in common
        is that they return a QR-code as binary blob which, in turn, will be turned into a
        <externalLink>
          <linkText>data URI</linkText>
          <linkUri>https://en.wikipedia.org/wiki/Data_URI_scheme</linkUri>
        </externalLink> by the
        <codeEntityReference>T:TwoFactorAuthNet.TwoFactorAuth</codeEntityReference> class. This makes it easy
        for you to display the image without requiring extra 'roundtrips' from browser to server and vice versa.
      </para>
      <code language="c#">
        <![CDATA[
// Display QR code to user
<p>Scan the following image with your app:</p>
<p><img src="@tfa.GetQrCodeImageAsDataUri("Bob Ross", secret)"></p>
        ]]>
      </code>
      <para>
        This results in:
      </para>
      <quote>
        <computerOutputInline>Scan the following image with your app:</computerOutputInline>
      </quote>
      <mediaLink>
        <image placement="near" xlink:href="qr"/>
      </mediaLink>
    </introduction>

    <relatedTopics>
      <link xlink:href="6660dddc-7aca-4a55-a83d-ea78cb5f6dfe" />
      <link xlink:href="e8ad5bb8-6473-40ff-b873-78c80d046733" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>